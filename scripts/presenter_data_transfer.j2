#!/bin/bash

# Copy presenter data to S3 bucket for retrieval and processing by backend XML
# service instances.

source "{{ informix_install_path }}/etc/informix.env.${USER}"

PATH=$PATH:/usr/local/bin

# -- Internal variables -------------------------------------------------------

script_name=$(basename "$0")

database="ef_db"

today=$(date '+%Y-%m-%d')
yesterday=$(date --date="${today} -1 day" '+%Y-%m-%d')
transfer_mode="$(tr '[:upper:]' '[:lower:]' <<< "${WEB_PRES_TRANS_MODE}")"
{% if ef_presenter_data.enabled %}
presenter_data_bucket="{{ ef_presenter_config.s3_bucket_name }}"
presenter_data_kms_key_id="{{ ef_presenter_config.kms_key_id }}"
{% else %}
presenter_data_bucket="dummy-ef-presenter-bucket-name"
presenter_data_kms_key_id="dummy-ef-presenter-kms-key-id"
{% endif %}

# -- General ------------------------------------------------------------------

check_user () {
    if [[ "${USER}" == "root" ]]; then
        echo "${script_name}: This script should be executed as a Tuxedo service user not root" >&2
        exit 1
    fi
}

exit_on_error () {
    local exit_code="$1"
    local message="$2"
    if [[ "${exit_code}" -ne 0 ]]; then
        echo "${script_name}: ${message}" >&2
        exit "${exit_code}"
    fi
}

create_mail_file () {
    mail_file=$(mktemp -t presenter_data_transfer.XXXXXXX)
    if [[ $? -ne 0 ]]; then
        echo "Unable to create temporary mail file" >&2
        exit 1
    fi
}

generate_live_data_file () {
    data_file=$(mktemp -t presenter_data_live.XXXXXXX)
    exit_on_error "$?" "Unable to create temporary file (${FUNCNAME[0]}:${LINENO})"

    dbaccess "${database}" - >/dev/null 2>&1 <<EOF
set isolation dirty read;
UNLOAD TO "${data_file}" DELIMITER ">"
SELECT pres_id, pres_auth_code, pres_e_mail_in, pres_name
FROM PRESENTER
WHERE pres_start_dt = (TODAY - 1)
AND pres_id !='88888888000'
AND pres_id not matches '6666*'
ORDER BY pres_start_dt;
EOF

    exit_on_error "$?" "dbaccess returned $? (${FUNCNAME[0]}:${LINENO})"
}

generate_test_data_file () {
    data_file=$(mktemp -t presenter_data_test.XXXXXXX)
    exit_on_error "$?" "Unable to create temporary file (${FUNCNAME[0]}:${LINENO})"

    dbaccess "${database}" - >/dev/null 2>&1 <<EOF
set isolation dirty read;
UNLOAD TO '${data_file}' DELIMITER '>'
SELECT pres_id, pres_auth_code, pres_e_mail_in, pres_name
FROM PRESENTER
WHERE pres_start_dt = TODAY
AND pres_id matches '6666*'
ORDER BY pres_start_dt;
EOF

    exit_on_error "$?" "dbaccess returned $? (${FUNCNAME[0]}:${LINENO})"
}

transfer_data_file () {
    aws s3 cp --sse aws:kms --sse-kms-key-id "${presenter_data_kms_key_id}" "${data_file}" "s3://${presenter_data_bucket}/${transfer_mode}-presenter-data-${data_date}"
    exit_on_error "$?" "file transfer failed with exit code $? (${FUNCNAME[0]}:${LINENO})"
}

generate_data_file () {
    if [[ "${transfer_mode}" == "test" ]]; then
        data_date="${today}"
        generate_test_data_file
        transfer_data_file
    elif [[ "${transfer_mode}" == "live" ]]; then
        data_date="${yesterday}"
        generate_live_data_file
        transfer_data_file
    else
        echo "Mode of operation cannot be determined; environment variable WEB_PRES_TRANS_MODE is not set" >&2
        exit 1
    fi
}

delete_mail_file () {
    rm -f "${mail_file}"
}

delete_data_file () {
    rm -f "${data_file}"
}

# -- Stats --------------------------------------------------------------------

email_data_file () {
{% if alerts.enabled %}
    local temp_file="${transfer_mode}-presenter-data-${data_date}"
    pushd /tmp >/dev/null
    cp -f "${data_file}" "${temp_file}"
    mailx -a "${temp_file}" -s "INFO - PRESENTER TRANSFER ${data_date}" {% for recipient in alerts_config.presenter_data_transfer %}{{ recipient }} {% endfor %}< "${mail_file}"
    rm -f "${temp_file}"
    popd >/dev/null
{% else %}
    echo "Alerts disabled; no mail message(s) will be generated"
{% endif %}
}

# -- Entrypoint ---------------------------------------------------------------

main () {
    check_user
    create_mail_file

    generate_data_file
    email_data_file

    delete_data_file
    delete_mail_file
}

main "${@}"
