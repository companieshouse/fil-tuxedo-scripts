#!/bin/bash

# Perform logical log backup and restart continuous backups for the specified
# Informix database.
#
# This script assumes that no continuous logical log backups are running for 
# the specified database and will terminate early if there are active backups
# (i.e. 'ontape -c' processes). The stop_all_logicals script should be used to
# terminate all continuous backup processes on the host *before* this script
# is called.
#
# Specify the service name as an argument to this script when executed (i.e. prod,
# scud, or ef).

# -- Internal variables -------------------------------------------------------

script_name=$(basename "$0")
parent_dir="$(cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd)"

informix_env_files_dir="{{ informix_install_path }}/etc"
informix_env_file_prefix="informix.env"

informix_logical_logs_dir="/db_dump"
informix_logical_logs_archive_dir="/db_dump/xdump"
informix_continuous_backup_delay_seconds="5"

max_archived_logical_log_days="2"

today=$(date +%d%m%y)
yesterday=$(date --date=yesterday +%d%m%y)

# -- General ------------------------------------------------------------------

check_service () {
    local service="${1}"

    if [[ ! "${service}" =~ ^(prod|scud|ef)$ ]]; then
        echo "Unknown service '${service}'; valid options are: prod scud ef" >&2
        exit 1
    fi
}

unset_informix_env_vars () {
    for env_var in INFORMIXSERVER INFORMIXDIR ONCONFIG INFORMIXSQLHOSTS; do
        unset "${env_var}"
    done
}

check_informix_env_vars () {
    local missing_env_vars=()

    for env_var in INFORMIXSERVER INFORMIXDIR ONCONFIG INFORMIXSQLHOSTS; do
        if [[ -z "${!env_var}" ]]; then
            missing_env_vars+=("${env_var}")
        fi
    done

    if [[ "{{ '${#missing_env_vars[@]}' }}" -gt 0 ]]; then
        for env_var in "${missing_env_vars[@]}"; do
            error "Missing environment variable '${env_var}'"
        done

        error "Aborting"
        send_alert
        exit 1
    fi
}

check_informix_config () {
    local env_file_path="${informix_env_files_dir}/${informix_env_file_prefix}.${service}"

    if [[ ! -f "${env_file_path}" ]]; then
        error "No configuration file at '${env_file_path}'"
        send_alert
        exit 1
    fi
}

source_informix_config () {
    local env_file_path="${informix_env_files_dir}/${informix_env_file_prefix}.${service}"

    source "${env_file_path}"
    if [[ $? -ne 0 ]]; then
        error "Unable to load Informix database configuration from '${env_file_path}'"
        send_alert
        exit 1
    fi
}

load_logging_functions () {
    source "${parent_dir}/logging"
    if [[ $? -ne 0 ]]; then
        echo "${script_name}: Unable to source logging functions into environment" >&2
        send_alert
        exit 1
    fi

    initialise_logging
}

check_logical_logs_dir () {
    if [[ ! -d "${informix_logical_logs_dir}" ]]; then
        error "Logical logs directory does not exist: '${informix_logical_logs_dir}'"
        send_alert
        exit 1
    fi
}

check_logical_logs_archive_dir () {
    if [[ ! -d "${informix_logical_logs_archive_dir}" ]]; then
        error "Logical logs archive directory does not exist: '${informix_logical_logs_archive_dir}'"
        send_alert
        exit 1
    fi
}

check_logical_log_file () {
    local logical_log_file_path="${1}"
    if [[ ! -f "${logical_log_file_path}" ]]; then
        info "Logical log file does not exist: '${logical_log_file_path}'"
        touch "${logical_log_file_path}" >/dev/null 2>&1
        chmod 660 "${logical_log_file_path}" >/dev/null 2>&1
        if [[ ! -f "${logical_log_file_path}" ]]; then
            error "Unable to create empty logical log file with 660 permissions at '${logical_log_file_path}'"
            send_alert
            exit 1
        fi
        info "Created empty logical log file: '${logical_log_file_path}'"
    fi
}

check_archived_logical_log_file () {
    local archived_logical_log_file_path="${1}"
    if [[ -f "${archived_logical_log_file_path}" ]]; then
        info "Deleting existing logical log archive file '${archived_logical_log_file_path}'"
        rm -f "${archived_logical_log_file_path}" >/dev/null 2>&1
        exit_on_error "$?" "Unable to remove existing logical log archive file '${archived_logical_log_file_path}' (${FUNCNAME[0]}:${LINENO})"
    fi
}

archive_logical_log_file () {
    info "Starting archival of logical log file"
    cp "${current_logical_log}" "${archived_logical_log}" >/dev/null 2>&1
    exit_on_error "$?" "Unable to archive logical log file from '${current_logical_log}' to '${archived_logical_log}'"
    info "Archived logical log file from '${current_logical_log}' to '${archived_logical_log}'"
    info "Finished archival of logical log file"
}

check_continuous_logical_log_backups () {
    local found_existing_continuous_backups="false"

    ontape_pids=( $(pgrep -f 'ontape -c') )

    if [[ "{{ '${#ontape_pids[@]}' }}" -eq 0 ]]; then
        trace "No continuous logical log backup processes found for service '${service}'"
        return
    fi

    for ontape_pid in "${ontape_pids[@]}"; do
        local ontape_service=$(cat /proc/${ontape_pid}/environ | xargs -0 -l | grep ONCONFIG | sed -r 's/.*\.(.*)/\1/')

        if [[ "${ontape_service}" = "${service}" ]]; then
            trace "Found existing continuous logical log backup process with PID '${ontape_pid}' for service '${service}'"
            found_existing_continuous_backups="true"
        fi
    done

    if [[ "${found_existing_continuous_backups}" == "true" ]]; then
        error "There are active continuous logical log backups (ontape -c) for service '${service}'; stop all existing continuous backups with 'stop_all_logicals' before attempting to start"
        exit 1
    fi
}

start_continuous_logical_log_backup () {
    info "Starting continuous logical log backup for '${service}' database"

    local logical_tape_device=$(grep "^LTAPEDEV" ${INFORMIXDIR}/etc/${ONCONFIG} | awk '{ print $2; }')
    if [[ -z "${logical_tape_device}" ]]; then
        error "Unable to determine logical tape device path (LTAPEDEV)"
        send_alert
        exit 1
    fi

    if [[ "${logical_tape_device}" != "${current_logical_log}" ]]; then
        error "Logical tape device path (LTAPEDEV) does not match expected path '${current_logical_log}'"
        send_alert
        exit 1
    fi

    trace "Informix logical tape device path: '${logical_tape_device}'"

    ontape -c <<< "$(echo -ne '\n')" >/dev/null 2>&1 &

    local continuous_backup_pid="$!"

    sleep "${informix_continuous_backup_delay_seconds}"

    if ! ps -p "${continuous_backup_pid}" >/dev/null 2>&1; then
        error "Continuous logical log backup process (${continuous_backup_pid}) terminated early"
        send_alert
        exit 1
    fi

    trace "Continuous logical log backup PID: ${continuous_backup_pid}"

    info "Continuous logical log backup for '${service}' database is running"
}

cleanup_archived_logical_logs () {
    info "Deleting archived logical logs older than ${max_archived_logical_log_days} days"
    find "${informix_logical_logs_archive_dir}" -maxdepth 1 -type f -name "${service}logical.*" -mtime +"${max_archived_logical_log_days}" -delete -print
}

exit_on_error () {
    local exit_code="${1}"
    local message="${2}"
    if [[ "${exit_code}" -ne 0 ]]; then
        error "${message}"
        send_alert
        exit "${exit_code}"
    fi
}

# -- Alerts -------------------------------------------------------------------

send_alert () {
{% if alerts.enabled %}
    local error_message="Logical log archive failed; check log file at '${log_file}'"
    mailx -r "${USER}@$(hostname)" -s "WARNING - Logical log archive failure" {% for recipient in alerts_config.logical_log_archive %}{{ recipient }} {% endfor %}<<< "${error_message}"
{% else %}
    echo "Alerts disabled; no mail message(s) will be generated"
{% endif %}
}

# -- Entrypoint ---------------------------------------------------------------

main () {
    local service="${1}"

    if [[ -z "${service}" ]]; then
        echo "Usage: ${script_name} <service-name>" >&2
        exit 1
    fi

    check_service "${service}"

    load_logging_functions

    local env_file_path="${informix_env_files_dir}/${informix_env_file_prefix}.${service}"

    check_informix_config
    unset_informix_env_vars
    info "Loading configuration file for specified service '${service}' at '${env_file_path}'"
    source_informix_config
    check_informix_env_vars

    log_file="{{ informix_logs_path }}/${service}/${script_name}.log"

    current_logical_log="${informix_logical_logs_dir}/${service}logical.log"
    archived_logical_log="${informix_logical_logs_archive_dir}/${service}logical.${yesterday}"

    trace "Service name: '${service}'"
    trace "Log file: '${log_file}'"
    trace "Informix logical log: '${current_logical_log}'"
    trace "Informix logical log archive: '${archived_logical_log}'"

    check_logical_logs_dir
    check_logical_logs_archive_dir
    check_logical_log_file "${current_logical_log}"
    check_archived_logical_log_file "${archived_logical_log}"

    check_continuous_logical_log_backups
    start_continuous_logical_log_backup

    cleanup_archived_logical_logs
}

main "${@}"
