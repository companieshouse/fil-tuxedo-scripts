#!/bin/bash

# Parse statistics files generated by ois-tuxedo-stack servers (output files
# generated by the morestats_miu script) and insert into prod Informix database.

# -- Internal variables -------------------------------------------------------

script_name=$(basename "$0")
parent_dir="$(cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd)"

database="prod"

informix_env_files_dir="{{ informix_install_path }}/etc"
informix_env_file_prefix="informix.env"

# stats_dir should be the path to a directory on a shared NFS mount; OIS Tuxedo
# servers use this to write output files to, and this script uses the same mount
# to read and processes those output files containing OIS stats
stats_dir="/scanning/ois-stats"
stats_archive_dir="${stats_dir}/oldstats"

# -- General ------------------------------------------------------------------

check_dir () {
    local dir_path="${1}"
    if [[ ! -d "${dir_path}" ]]; then
        info "Creating directory '${dir_path}'"
        mkdir -p "${dir_path}"
        exit_on_error "$?" "Unable to create directory '${dir_path}'"
    fi
}

insert_database_statistics () {
    local data="${1}"
    local server="${2}"
    local service="${3}"
    local function_number="${4}"
    local total="${5}"
    local average="${6}"

    trace "Starting ${database} database insert"

    trace "Performing insert with column values \
        data='${data}' \
        server='${server}' \
        service='${service}' \
        function_number='${function_number}' \
        total='${total}' \
        average='${average}'"

    dbaccess "${database}" - >/dev/null 2>&1 <<EOF
INSERT INTO ois_stats
(date,
server,
service,
function,
total,
average)
VALUES  ("${data}",
"${server}",
"${service}",
${function_number},
${total},
${average});
EOF
    exit_on_error "$?" "dbaccess returned $? (${FUNCNAME[0]}:${LINENO})"

    trace "Finished ${database} database insert"
}

process_stats_files () {
    local service="${1}"
    local server="${2}"

    while read -r -d $'\0' stats_file; do
        info "Processing file '${stats_file}' for service '${service}' server '${server}'"

        local stats_file_name=$(basename "${stats_file}")
        local date=$(sed -rn "s|$service\.func_stats_$server\.(.*)|\1|p" <<< "${stats_file_name}")

        while read -r function_number total average; do
            insert_database_statistics \
                "${date}" \
                "${server}" \
                "${service}" \
                "${function_number}" \
                "${total}" \
                "${average}"
        done < "${stats_file}"

        info "Archiving stats file ${stats_file} to ${stats_archive_dir}"
        mv "${stats_file}" "${stats_archive_dir}/"
        exit_on_error "$?" "Unable to archive stats file ${stats_file}"

    done < <(find "${stats_dir}" \
        -mindepth 1 \
        -maxdepth 1 \
        -type f \
        -name "${service}.func_stats_${server}.*" \
        -print0)
}

load_logging_functions () {
    source "${parent_dir}/logging"
    if [[ $? -ne 0 ]]; then
        echo "${script_name}: Unable to source logging functions into environment" >&2
        exit 1
    fi

    initialise_logging
}

load_database_configuration () {
    local informix_config="${informix_env_files_dir}/${informix_env_file_prefix}.${database}"

    if [[ ! -f "${informix_config}" ]]; then
        error "No Informix configuration file found '${informix_config}'"
        exit 1
    fi

    source "${informix_config}"
    
}

exit_on_error () {
    local exit_code="${1}"
    local message="${2}"
    if [[ "${exit_code}" -ne 0 ]]; then
        error "${message}"
        exit "${exit_code}"
    fi
}

# -- Entrypoint ---------------------------------------------------------------

main () {
    load_logging_functions

    log_file="{{ informix_logs_path }}/common/${script_name}.log"

    info "Starting OIS stats update"

    load_database_configuration

    check_dir "${stats_dir}"
    check_dir "${stats_archive_dir}"

    for service in xml ceu publ wck; do
        for instance_number in $(seq -f '%02g' 1 3); do
            process_stats_files "${service}" "ois-live-${instance_number}"
        done
    done

    info "Finished OIS stats update"
}

main "${@}"
