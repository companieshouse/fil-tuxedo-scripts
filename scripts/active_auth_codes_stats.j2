#!/bin/bash

# Generate active auth codes stats for the previous week and send by email.

source "{{ informix_install_path }}/etc/informix.env.${USER}"

# -- Internal variables -------------------------------------------------------

script_name=$(basename "$0")

database="ef_db"
database_date_format="Y4MD-"

date_format="+%Y-%m-%d"
today=$(date "${date_format}")
last_sunday=$(date -d "${today} -$(date -d ${today} +%u) days"  "${date_format}")
last_monday=$(date -d "${last_sunday} -6 days"  "${date_format}")

# -- General ------------------------------------------------------------------

check_user () {
    if [[ "${USER}" == "root" ]]; then
        echo "${script_name}: This script should be executed as a Tuxedo service user not root" >&2
        exit 1
    fi
}

create_mail_file () {
    mail_file=$(mktemp -t active_auth_codes_stats.XXXXXXX)
    if [[ $? -ne 0 ]]; then
        echo "Unable to create temporary mail file" >&2
        exit 1
    fi
}

exit_on_error () {
    local exit_code="$1"
    local message="$2"
    if [[ "${exit_code}" -ne 0 ]]; then
        echo "Error: ${message}"
        exit "${exit_code}"
    fi
}

get_active_auth_codes_count () {

    local active_auth_codes_count

    active_auth_codes_count=$(DBDATE="${database_date_format}" dbaccess "${database}" - <<EOF 2>/dev/null
select COUNT (*)
from doc_auth
where doc_auth_start_dt >= DATE("${last_monday}")
and doc_auth_start_dt <= DATE("${last_sunday}")
and doc_auth_end_dt is null
EOF
)
    exit_on_error "$?" "dbaccess returned $? (${FUNCNAME[0]}:${LINENO})"

    active_auth_codes_count=$(grep -E '([0-9])' <<< "${active_auth_codes_count}" | awk '{print $1}')

    if [[ -z "${active_auth_codes_count}" ]]; then
        echo "Unable to determine active auth codes count" >&2
        exit 1
    fi

    echo -e "Active Authentication Codes Count week ending $(date -d "${last_sunday}" '+%A %d %b %Y'): ${active_auth_codes_count}\n" >> "${mail_file}"
}

delete_mail_file () {
    rm -f "${mail_file}"
}

# -- Stats --------------------------------------------------------------------

send_stats () {
{% if stats.enabled %}
    mailx -s "Count active auth-codes : Period $(date -d "${last_monday}" '+%A %d %b %Y') to $(date -d "${last_sunday}" '+%A %d %b %Y') (inclusive)" {% for recipient in stats_config.active_auth_codes_stats_recipients %}{{ recipient }} {% endfor %}< "${mail_file}"
{% else %}
    echo "Stats disabled; no file(s) will be sent"
{% endif %}
}

# -- Entrypoint ---------------------------------------------------------------

main () {
    check_user
    create_mail_file
    get_active_auth_codes_count
    send_stats
    delete_mail_file
}

main "${@}"

