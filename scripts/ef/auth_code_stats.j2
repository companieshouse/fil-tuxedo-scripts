#!/bin/bash

# Generate auth code stats and send by email.

source "{{ informix_install_path }}/etc/informix.env.${USER}"

# -- Internal variables -------------------------------------------------------

script_name=$(basename "$0")

database="ef_db"

today="$(date)"
today_with_hyphens="$(date --date="${today}" '+%d/%m/%Y')"
today_with_slashes="$(date --date="${today}" '+%Y-%m-%d')"

total_auth_codes_added=0
total_auth_codes_removed=0
auth_codes_removed_with_indicators=0

log_file="{{ tuxedo_logs_path }}/${USER}/${script_name}.log"

# -- General ------------------------------------------------------------------

log () {
    local level="${1}"
    local message="$(echo -e "${2}")"
    echo -e  "$(date --iso-8601=seconds) ${level} ${message}" | tee -a "${log_file}"
}

trace () {
    local message="${1}"
    if [[ "${log_level}" == "trace" ]]; then
        log "TRACE" "${message}"
    fi
}

error () {
    local message="${1}"
    log "ERROR" "${message}"
}

info () {
    local message="${1}"
    log "INFO" "${message}"
}

check_user () {
    if [[ "${USER}" == "root" ]]; then
        error "${script_name}: This script should be executed as a Tuxedo service user not root"
        exit 1
    fi
}

exit_on_error () {
    local exit_code="$1"
    local message="$2"

    if [[ "${exit_code}" -ne 0 ]]; then
        error "${message}"
        exit 1
    fi
}

create_mail_file () {
    mail_file=$(mktemp -t "${script_name}.XXXXXXX")
    exit_on_error "$?" "Unable to create temporary mail file (${FUNCNAME[0]}:${LINENO})"
}

add_stats_header () {
    append_mail_file "Auth code processing statistics for ${today}\n\n"
}

add_auth_code_additions_header () {
    append_mail_file "Auth code additions......\n\n" 
}

add_auth_change_action_n_count () {
    local count; count=$(dbaccess "${database}" - 2>/dev/null <<EOF
set isolation to dirty read;
select count(*) from auth_change where
completed = '${today_with_hyphens}'
and action_ind = "N"
and old_code is null;
EOF
)
    exit_on_error "$?" "${FUNCNAME[0]}:${LINENO} dbaccess returned $?"

    count="$(grep -Eo '[0-9]+' <<< "${count}")"

    if [[ $? -ne 0 || -z "${count}" ]]; then
        error "${FUNCNAME[0]}:${LINENO} Unable to determine row count"
        exit 1
    fi

    (( total_auth_codes_added += count))
    append_mail_file "Count of new auth codes added from web updates (Action ind N, letter type 1) : ${count}\n"
}

add_doc_auth_inc_count () {
    local count; count=$(dbaccess "${database}" - 2>/dev/null <<EOF
set isolation to dirty read;
select count(*) from doc_auth where
extend(doc_auth_start_dt,year to day) = "${today_with_slashes}"
and doc_auth_end_dt is null
and doc_auth_origin = "INC"
EOF
)
    exit_on_error "$?" "${FUNCNAME[0]}:${LINENO} dbaccess returned $?"

    count="$(grep -Eo '[0-9]+' <<< "${count}")"

    if [[ $? -ne 0 || -z "${count}" ]]; then
        error "${FUNCNAME[0]}:${LINENO} Unable to determine row count"
        exit 1
    fi

    (( total_auth_codes_added += count))
    append_mail_file "Count of new auth codes added on incorporation (No letter issued) : ${count}\n"
}

add_auth_change_action_r_count () {
    local count; count=$(dbaccess "${database}" - 2>/dev/null <<EOF
set isolation to dirty read;
select count(*) from auth_change where
completed = "${today_with_hyphens}"
and action_ind = "R"
EOF
)
    exit_on_error "$?" "${FUNCNAME[0]}:${LINENO} dbaccess returned $?"

    count="$(grep -Eo '[0-9]+' <<< "${count}")"

    if [[ $? -ne 0 || -z "${count}" ]]; then
        error "${FUNCNAME[0]}:${LINENO} Unable to determine row count"
        exit 1
    fi

    (( total_auth_codes_added += count))
    append_mail_file "Count of new auth codes added to replace an existing code from the web (Action ind R, letter type 5) : ${count}\n"
}

add_auth_change_action_p_count () {
    local count; count=$(dbaccess "${database}" - 2>/dev/null <<EOF
set isolation to dirty read;
select count(*) from auth_change where
completed = "${today_with_hyphens}"
and action_ind = "P"
EOF
)
    exit_on_error "$?" "${FUNCNAME[0]}:${LINENO} dbaccess returned $?"

    count="$(grep -Eo '[0-9]+' <<< "${count}")"

    if [[ $? -ne 0 || -z "${count}" ]]; then
        error "${FUNCNAME[0]}:${LINENO} Unable to determine row count"
        exit 1
    fi

    (( total_auth_codes_added += count))
    append_mail_file "Count of new auth codes added for a package request (Action ind P, letter type 3) : ${count}\n"
}

add_auth_codes_count_for_eshuttles () {
    local count; count=$(dbaccess "${database}" - 2>/dev/null <<EOF
set isolation to dirty read;
select count(*) from doc_auth where
extend(doc_auth_start_dt,year to day) = "${today_with_slashes}"
and doc_auth_end_dt is null
and doc_auth_origin = "ESH"
EOF
)
    exit_on_error "$?" "${FUNCNAME[0]}:${LINENO} dbaccess returned $?"

    count="$(grep -Eo '[0-9]+' <<< "${count}")"

    if [[ $? -ne 0 || -z "${count}" ]]; then
        error "${FUNCNAME[0]}:${LINENO} Unable to determine row count"
        exit 1
    fi

    (( total_auth_codes_added += count))
    append_mail_file "Count of auth codes added for e-shuttles (DOC1 Letter) : ${count}\n"
}

add_auth_codes_count_for_bulk_loads () {
    local count; count=$(dbaccess "${database}" - 2>/dev/null <<EOF
set isolation to dirty read;
select count(*) from doc_auth where
extend(doc_auth_start_dt,year to day) = "${today_with_slashes}"
and doc_auth_end_dt is null
and doc_auth_origin = "BUL"
EOF
)
    exit_on_error "$?" "${FUNCNAME[0]}:${LINENO} dbaccess returned $?"

    count="$(grep -Eo '[0-9]+' <<< "${count}")"

    if [[ $? -ne 0 || -z "${count}" ]]; then
        error "${FUNCNAME[0]}:${LINENO} Unable to determine row count"
        exit 1
    fi

    (( total_auth_codes_added += count))
    append_mail_file "Count of auth codes added for bulk loads (No letter issued) : ${count}\n"
}

add_auth_codes_count_for_ef_admin () {
    local count; count=$(dbaccess "${database}" - 2>/dev/null <<EOF
set isolation to dirty read;
select count(*) from doc_auth where
extend(doc_auth_start_dt,year to day) = "${today_with_slashes}"
and doc_auth_end_dt is null
and doc_auth_origin = "EFA"
EOF
)
    exit_on_error "$?" "${FUNCNAME[0]}:${LINENO} dbaccess returned $?"

    count="$(grep -Eo '[0-9]+' <<< "${count}")"

    if [[ $? -ne 0 || -z "${count}" ]]; then
        error "${FUNCNAME[0]}:${LINENO} Unable to determine row count"
        exit 1
    fi

    (( total_auth_codes_added += count))
    append_mail_file "Count of new auth codes manually updated by EF Admin (No letter issued) : ${count}\n\n"
}

add_total_count_new_auth_codes () {
    append_mail_file "Total count of auth code additions for ${today_with_hyphens} : ${total_auth_codes_added}\n\n"
}


add_auth_code_reminder_letters_header () {
    append_mail_file "Auth code reminder letters......\n\n"
}

add_doc_change_action_c_count () {
    local count; count=$(dbaccess "${database}" - 2>/dev/null <<EOF
set isolation to dirty read;
select count(*) from auth_change where
completed = "${today_with_hyphens}"
and action_ind = "C"
EOF
)
    exit_on_error "$?" "${FUNCNAME[0]}:${LINENO} dbaccess returned $?"

    count="$(grep -Eo '[0-9]+' <<< "${count}")"

    if [[ $? -ne 0 || -z "${count}" ]]; then
        error "${FUNCNAME[0]}:${LINENO} Unable to determine row count"
        exit 1
    fi

    append_mail_file "Count of Reminder letters issued for ${today_with_hyphens} (Action ind C, letter type 1) : ${count}\n\n"
}

add_auth_code_removals_header () {
    append_mail_file "Auth code removals......\n\n"
}

add_auth_codes_count_for_bulk_removals () {
    local count; count=$(dbaccess "${database}" - 2>/dev/null <<EOF
set isolation to dirty read;
select count(*) from doc_auth where
doc_auth_end_dt = "${today_with_hyphens}"
and (doc_auth_closed_by = "BULK" or doc_auth_closed_by = "BULKRES")
EOF
)
    exit_on_error "$?" "${FUNCNAME[0]}:${LINENO} dbaccess returned $?"

    count="$(grep -Eo '[0-9]+' <<< "${count}")"

    if [[ $? -ne 0 || -z "${count}" ]]; then
        error "${FUNCNAME[0]}:${LINENO} Unable to determine row count"
        exit 1
    fi

    (( auth_codes_removed_with_indicators += count))
    append_mail_file "Count of auth codes removed via bulk removal (No letter issued): ${count}\n"
}

add_auth_codes_count_for_cancelled_via_web () {
    local count; count=$(dbaccess "${database}" - 2>/dev/null <<EOF
set isolation to dirty read;
select count(*) from auth_change where
completed = "${today_with_hyphens}"
and action_ind = "D"
EOF
)
    exit_on_error "$?" "${FUNCNAME[0]}:${LINENO} dbaccess returned $?"

    count="$(grep -Eo '[0-9]+' <<< "${count}")"

    if [[ $? -ne 0 || -z "${count}" ]]; then
        error "${FUNCNAME[0]}:${LINENO} Unable to determine row count"
        exit 1
    fi

    (( auth_codes_removed_with_indicators += count))
    append_mail_file "Count of auth codes cancelled via the web (Action ind D, letter type 0 {no letter}) : ${count}\n"
}

add_total_count_removed_auth_codes () {
    total_auth_codes_removed=$(dbaccess "${database}" - 2>/dev/null <<EOF
set isolation to dirty read;
select count(*) from doc_auth where
doc_auth_end_dt = "${today_with_hyphens}"
EOF
)
    exit_on_error "$?" "${FUNCNAME[0]}:${LINENO} dbaccess returned $?"

    total_auth_codes_removed="$(grep -Eo '[0-9]+' <<< "${total_auth_codes_removed}")"

    if [[ $? -ne 0 || -z "${total_auth_codes_removed}" ]]; then
        error "${FUNCNAME[0]}:${LINENO} Unable to determine row count"
        exit 1
    fi

    append_mail_file "Count of auth codes cancelled via EF Admin (No Letter Issued) : $(( total_auth_codes_removed - auth_codes_removed_with_indicators ))\n"
    append_mail_file "Total count of auth codes removed for ${today_with_hyphens} : ${total_auth_codes_removed}\n\n"
}

add_auth_codes_total_header () {
    append_mail_file "Auth code total for the day......\n\n"
}

add_auth_codes_total_count () {
    append_mail_file "Daily difference in auth codes for ${today_with_hyphens} : $(( total_auth_codes_added - total_auth_codes_removed ))\n"
}

append_mail_file () {
    local message="$1"
    echo -e "${message}" >> "${mail_file}"
}

delete_mail_file () {
    rm -f "${mail_file}"
}

# -- Stats --------------------------------------------------------------------

send_stats () {
{% if stats.enabled %}
    mailx -r "${USER}@$(hostname)" -s "Authentication Code Stats - ${today_with_hyphens}" {% for recipient in stats_config.auth_code_stats_recipients %}{{ recipient }} {% endfor %}< "${mail_file}"
{% else %}
    echo "Stats disabled; no file(s) will be sent"
{% endif %}
}

initialise_logging () {
    log_level=$(echo "${LOGLEVEL:-INFO}" | tr '[:upper:]' '[:lower:]')
}

# -- Entrypoint ---------------------------------------------------------------

main () {
    initialise_logging
    check_user
    create_mail_file

    add_stats_header

    add_auth_code_additions_header
    add_auth_change_action_n_count
    add_doc_auth_inc_count
    add_auth_change_action_r_count
    add_auth_change_action_p_count
    add_auth_codes_count_for_eshuttles
    add_auth_codes_count_for_bulk_loads
    add_auth_codes_count_for_ef_admin
    add_total_count_new_auth_codes

    add_auth_code_reminder_letters_header
    add_doc_change_action_c_count

    add_auth_code_removals_header
    add_auth_codes_count_for_bulk_removals
    add_auth_codes_count_for_cancelled_via_web
    add_total_count_removed_auth_codes

    add_auth_codes_total_header
    add_auth_codes_total_count

    send_stats
    delete_mail_file
}

main "${@}"
