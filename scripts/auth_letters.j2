#!/bin/bash

# Update status of auth change entries with missing auth codes.

source "{{ informix_install_path }}/etc/informix.env.${USER}"

# -- Internal variables -------------------------------------------------------

script_name=$(basename "$0")

app_dir="${HOME}/deployment/appdir"

database="ef_db"

log_file="{{ tuxedo_logs_path }}/${USER}/${script_name}.log"

# -- General ------------------------------------------------------------------

log () {
    local message="$1"
    tee -a "${log_file}" <<< "$(date --iso-8601=seconds) ${message}"
}

check_user () {
    if [[ "${USER}" == "root" ]]; then
        log "Error: This script should be executed as a Tuxedo service user not root"
        exit 1
    fi
}

create_mail_file () {
    mail_file=$(mktemp -t "${script_name}.XXXXXXX")
    if [[ $? -ne 0 ]]; then
        echo "Unable to create temporary mail file" >&2
        exit 1
    fi
}

exit_on_error () {
    local exit_code="$1"
    local message="$2"
    if [[ "${exit_code}" -ne 0 ]]; then
        log "Error: ${message}"
        exit "${exit_code}"
    fi
}

create_unload_file () {
    unload_file=$(mktemp -t orders_archive_unload_file.XXXXXXX)
    exit_on_error "$?" "Unable to create temporary unload file (${FUNCNAME[0]}:${LINENO})"
}

unload_company_numbers () {
    log "Starting company numbers unload operation"

    dbaccess "${database}" - >/dev/null 2>&1 <<EOF
set isolation to dirty read;
UNLOAD TO "${unload_file}"
select comp_no
from auth_change
where status ='P'
AND START_DATE = TODAY
AND NEW_CODE IS NULL AND OLD_CODE IS NULL
EOF
    exit_on_error "$?" "dbaccess returned $? (${FUNCNAME[0]}:${LINENO})"

    log "Finished company numbers unload operation"
}

set_auth_change_status () {
    log "Starting auth change update operation"

    company_number_count=0

    while read -r company_number; do
        log "Company number is ${company_number}"

        if [[ -z "$[company_number]" ]]; then
            continue
        fi

        dbaccess "${database}" - >/dev/null 2>&1 <<EOF
UPDATE AUTH_CHANGE
SET STATUS ='V'
WHERE START_DATE = TODAY
AND COMP_NO ='${company_number}';
EOF
        exit_on_error "$?" "dbaccess returned $? (${FUNCNAME[0]}:${LINENO})"

        (( company_number_count += 1 ))

        append_mail_file "${company_number} has been updated to status 'V'; please correct."
    done < <(sed -e 's/|//g' ${unload_file})

    log "Finished auth change update operation"
}

delete_unload_file () {
    rm -f "${unload_file}"
    exit_on_error "$?" "Unable to remove temporary file (${FUNCNAME[0]}:${LINENO})"
}

run_auth_letters () {
    log "Starting auth letters procedure"
    "${app_dir}/auth_letters" 2>&1 | tee -a "${log_file}"
    log "Finished auth letters procedure"
}

append_mail_file () {
    local message="$1"
    echo "${message}" >> "${mail_file}"
}

delete_mail_file () {
    rm -f "${mail_file}"
}

# -- Alerts -------------------------------------------------------------------

send_alert () {
{% if alerts.enabled %}
    mailx -r "${USER}@$(hostname)" -s "ACTION - ${company_number_count} numbers without auth codes - $(date)" {% for recipient in alerts_config.auth_letters %}{{ recipient }} {% endfor %}< "${mail_file}"
{% else %}
    echo "Alerts disabled; no mail message(s) will be generated"
{% endif %}
}

# -- Entrypoint ---------------------------------------------------------------

main () {
    run_auth_letters
    create_mail_file
    create_unload_file
    unload_company_numbers
    set_auth_change_status

    if [[ "${company_number_count}" -gt 0 ]]; then
        send_alert
    fi

    delete_unload_file
    delete_mail_file
}

main "${@}"
